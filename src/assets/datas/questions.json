{
  "categories": [
    {
      "category": "HTML",
      "levels": {
        "easy": [
          {
            "id": 1,
            "question": "What does HTML stand for?",
            "options": [
              "Hypertext Markup Language",
              "Hyper Transfer Markup Language",
              "Hyperlink and Text Markup Language",
              "Home Tool Markup Language"
            ],
            "correctAnswer": "Hypertext Markup Language",
            "explanation": "HTML stands for Hypertext Markup Language, the standard language for creating web pages."
          },
          {
            "id": 2,
            "question": "Which HTML tag is used to create a hyperlink?",
            "options": [
              "<a>",
              "<link>",
              "<href>",
              "<h1>"
            ],
            "correctAnswer": "<a>",
            "explanation": "The <a> tag defines a hyperlink, which is used to link from one page to another."
          },
          {
            "id": 3,
            "question": "What is the correct HTML element for inserting a line break?",
            "options": [
              "<break>",
              "<lb>",
              "<br>",
              "<line>"
            ],
            "correctAnswer": "<br>",
            "explanation": "The <br> element is used to insert a line break in the content."
          },
          {
            "id": 4,
            "question": "What is the correct HTML element to define important text?",
            "options": [
              "<important>",
              "<i>",
              "<strong>",
              "<b>"
            ],
            "correctAnswer": "<strong>",
            "explanation": "The <strong> element defines text that is important and usually displayed in bold."
          },
          {
            "id": 5,
            "question": "Which of the following tags is self-closing in HTML?",
            "options": [
              "<div>",
              "<img>",
              "<p>",
              "<h1>"
            ],
            "correctAnswer": "<img>",
            "explanation": "The <img> tag is self-closing and doesn't require a closing tag."
          },
          {
            "id": 6,
            "question": "How can you make a numbered list in HTML?",
            "options": [
              "<ol>",
              "<ul>",
              "<list>",
              "<dl>"
            ],
            "correctAnswer": "<ol>",
            "explanation": "The <ol> tag defines an ordered (numbered) list."
          },
          {
            "id": 7,
            "question": "Which tag is used to define an unordered list?",
            "options": [
              "<ul>",
              "<li>",
              "<ol>",
              "<dl>"
            ],
            "correctAnswer": "<ul>",
            "explanation": "The <ul> tag defines an unordered list, which typically displays bullet points."
          },
          {
            "id": 8,
            "question": "What is the correct way to create an e-mail link in HTML?",
            "options": [
              "<a href='mailto:example@example.com'>",
              "<mail>example@example.com</mail>",
              "<email href='example@example.com'>",
              "<link email='example@example.com'>"
            ],
            "correctAnswer": "<a href='mailto:example@example.com'>",
            "explanation": "The 'mailto' attribute is used inside the <a> tag to create an email link."
          },
          {
            "id": 9,
            "question": "How do you create a comment in HTML?",
            "options": [
              "<!-- Comment -->",
              "// Comment",
              "/* Comment */",
              "** Comment **"
            ],
            "correctAnswer": "<!-- Comment -->",
            "explanation": "HTML comments are written inside <!-- and -->."
          },
          {
            "id": 10,
            "question": "Which HTML element is used for the largest heading?",
            "options": [
              "<h1>",
              "<h2>",
              "<h3>",
              "<heading>"
            ],
            "correctAnswer": "<h1>",
            "explanation": "The <h1> tag defines the largest heading."
          }
        ],
        "medium": [
          {
            "id": 1,
            "question": "What is the purpose of the 'alt' attribute in an image tag?",
            "options": [
              "To display a tooltip when hovering over an image",
              "To provide alternative text if the image fails to load",
              "To align the image to the center",
              "To add styles to the image"
            ],
            "correctAnswer": "To provide alternative text if the image fails to load",
            "explanation": "The 'alt' attribute is used for accessibility and provides an alternative description if the image can't be displayed."
          },
          {
            "id": 2,
            "question": "Which HTML tag is used to define a container for an external interactive application?",
            "options": [
              "<embed>",
              "<object>",
              "<iframe>",
              "<applet>"
            ],
            "correctAnswer": "<iframe>",
            "explanation": "The <iframe> tag is used to embed another document within the current HTML document."
          },
          {
            "id": 3,
            "question": "What is the purpose of the 'input' tag in HTML?",
            "options": [
              "To create form elements",
              "To create buttons",
              "To link CSS files",
              "To add a video"
            ],
            "correctAnswer": "To create form elements",
            "explanation": "The <input> tag is used to create various types of form fields, such as text boxes and checkboxes."
          },
          {
            "id": 4,
            "question": "What is the purpose of the <meta> tag in HTML?",
            "options": [
              "To store information about the webpage",
              "To create a button",
              "To display an image",
              "To define a heading"
            ],
            "correctAnswer": "To store information about the webpage",
            "explanation": "The <meta> tag is used to provide metadata about the HTML document."
          },
          {
            "id": 5,
            "question": "Which HTML tag is used to display a video file?",
            "options": [
              "<video>",
              "<movie>",
              "<clip>",
              "<media>"
            ],
            "correctAnswer": "<video>",
            "explanation": "The <video> tag is used to embed video content into an HTML document."
          },
          {
            "id": 6,
            "question": "What does the 'action' attribute in a form tag do?",
            "options": [
              "Specifies where to send the form data",
              "Specifies the method to use to send form data",
              "Specifies the type of form element",
              "Specifies the form's default behavior"
            ],
            "correctAnswer": "Specifies where to send the form data",
            "explanation": "The 'action' attribute defines the URL to which the form's data will be sent when submitted."
          },
          {
            "id": 7,
            "question": "How can you make an image clickable in HTML?",
            "options": [
              "By wrapping the <img> tag inside an <a> tag",
              "By using the 'clickable' attribute in the <img> tag",
              "By using JavaScript",
              "By defining the image in the <button> tag"
            ],
            "correctAnswer": "By wrapping the <img> tag inside an <a> tag",
            "explanation": "You can make an image clickable by nesting it inside an <a> (anchor) tag."
          },
          {
            "id": 8,
            "question": "What is the purpose of the 'target' attribute in a hyperlink?",
            "options": [
              "To specify where to open the linked document",
              "To create a tooltip for the link",
              "To change the text color of the link",
              "To set the destination folder for the link"
            ],
            "correctAnswer": "To specify where to open the linked document",
            "explanation": "The 'target' attribute in a hyperlink specifies whether to open the link in the same tab, a new tab, etc."
          },
          {
            "id": 9,
            "question": "Which attribute is used to open the linked document in a new tab?",
            "options": [
              "target='_blank'",
              "rel='new_tab'",
              "open='_tab'",
              "href='new'"
            ],
            "correctAnswer": "target='_blank'",
            "explanation": "The target='_blank' attribute opens the linked document in a new tab."
          },
          {
            "id": 10,
            "question": "How do you specify a background color in HTML?",
            "options": [
              "Using the 'style' attribute with the 'background-color' property",
              "Using the 'bgcolor' attribute",
              "Using the <color> tag",
              "Using the 'background' attribute"
            ],
            "correctAnswer": "Using the 'style' attribute with the 'background-color' property",
            "explanation": "You can set the background color using the 'style' attribute with the 'background-color' property in HTML."
          }
        ],
        "hard": [
          {
            "id": 1,
            "question": "What is the purpose of the 'srcset' attribute in the <img> tag?",
            "options": [
              "To specify multiple image sources for different display conditions",
              "To preload images",
              "To set the image source",
              "To set alternate text for an image"
            ],
            "correctAnswer": "To specify multiple image sources for different display conditions",
            "explanation": "The 'srcset' attribute allows you to specify different images for different screen sizes or resolutions."
          },
          {
            "id": 2,
            "question": "What does the 'defer' attribute in a <script> tag do?",
            "options": [
              "Loads the script after the HTML has been parsed",
              "Preloads the script before the HTML is parsed",
              "Prevents the script from running",
              "Defers the script indefinitely"
            ],
            "correctAnswer": "Loads the script after the HTML has been parsed",
            "explanation": "The 'defer' attribute ensures that the script will be executed after the HTML is parsed, helping to improve page load times."
          },
          {
            "id": 3,
            "question": "Which HTML5 element is used to define navigation links?",
            "options": [
              "<nav>",
              "<link>",
              "<header>",
              "<footer>"
            ],
            "correctAnswer": "<nav>",
            "explanation": "The <nav> element is used to define navigation links within the document."
          },
          {
            "id": 4,
            "question": "What is the 'data-*' attribute used for in HTML?",
            "options": [
              "To store custom data",
              "To define a table",
              "To set a data type",
              "To specify meta data"
            ],
            "correctAnswer": "To store custom data",
            "explanation": "The 'data-*' attribute is used to store custom data private to the page or application."
          },
          {
            "id": 5,
            "question": "What is the <picture> tag used for in HTML5?",
            "options": [
              "To define multiple image sources for responsive images",
              "To group images together",
              "To embed a video",
              "To format images for print"
            ],
            "correctAnswer": "To define multiple image sources for responsive images",
            "explanation": "The <picture> tag is used to serve different images based on the screen size or pixel density of the display."
          },
          {
            "id": 6,
            "question": "How can you embed audio in an HTML5 document?",
            "options": [
              "Using the <audio> tag",
              "Using the <sound> tag",
              "Using the <embed> tag",
              "Using the <bgsound> tag"
            ],
            "correctAnswer": "Using the <audio> tag",
            "explanation": "The <audio> tag is used in HTML5 to embed audio files on a webpage."
          },
          {
            "id": 7,
            "question": "Which HTML attribute is used to make a form field mandatory?",
            "options": [
              "required",
              "mandatory",
              "validate",
              "compulsory"
            ],
            "correctAnswer": "required",
            "explanation": "The 'required' attribute is used to make sure the user fills in a field before submitting the form."
          },
          {
            "id": 8,
            "question": "How do you specify multiple possible files for an <img> element in HTML?",
            "options": [
              "Using the 'srcset' attribute",
              "Using the 'multi-src' attribute",
              "Using the 'img-set' element",
              "Using multiple <img> tags"
            ],
            "correctAnswer": "Using the 'srcset' attribute",
            "explanation": "The 'srcset' attribute defines different image sources depending on screen sizes or resolutions."
          },
          {
            "id": 9,
            "question": "How do you specify an image as a favicon in HTML?",
            "options": [
              "Using a <link> tag with rel='icon'",
              "Using the <img> tag",
              "Using the <meta> tag",
              "Using the <icon> tag"
            ],
            "correctAnswer": "Using a <link> tag with rel='icon'",
            "explanation": "Favicons are specified using a <link> element with the 'rel' attribute set to 'icon'."
          },
          {
            "id": 10,
            "question": "What is the purpose of the 'autofocus' attribute in a form element?",
            "options": [
              "To focus on the field when the page loads",
              "To highlight the field",
              "To prevent the field from losing focus",
              "To fill the field automatically"
            ],
            "correctAnswer": "To focus on the field when the page loads",
            "explanation": "The 'autofocus' attribute ensures that the input field is automatically focused when the page is loaded."
          }
        ]
      }
    },
    {
      "category": "CSS",
      "levels": {
        "easy": [
          {
            "id": 1,
            "question": "What does CSS stand for?",
            "options": [
              "Cascading Style Sheets",
              "Colorful Style Sheets",
              "Computer Style Sheets",
              "Creative Style Sheets"
            ],
            "correctAnswer": "Cascading Style Sheets",
            "explanation": "CSS stands for Cascading Style Sheets, which is used to control the style of web pages."
          },
          {
            "id": 2,
            "question": "Which HTML attribute is used to define inline styles?",
            "options": [
              "style",
              "class",
              "id",
              "styles"
            ],
            "correctAnswer": "style",
            "explanation": "The 'style' attribute allows you to apply inline styles directly to an HTML element."
          },
          {
            "id": 3,
            "question": "What is the correct syntax for referring to an external style sheet?",
            "options": [
              "<link rel='stylesheet' href='style.css'>",
              "<style src='style.css'>",
              "<stylesheet>style.css</stylesheet>",
              "<script href='style.css'>"
            ],
            "correctAnswer": "<link rel='stylesheet' href='style.css'>",
            "explanation": "External style sheets are linked using the <link> element with rel='stylesheet'."
          },
          {
            "id": 4,
            "question": "Which CSS property controls the text size?",
            "options": [
              "font-size",
              "text-size",
              "font-style",
              "text-style"
            ],
            "correctAnswer": "font-size",
            "explanation": "The 'font-size' property sets the size of the text."
          },
          {
            "id": 5,
            "question": "How do you change the background color of an element?",
            "options": [
              "background-color",
              "color",
              "bgcolor",
              "background"
            ],
            "correctAnswer": "background-color",
            "explanation": "The 'background-color' property changes the background color of an element."
          },
          {
            "id": 6,
            "question": "Which CSS property is used to change the font of text?",
            "options": [
              "font-family",
              "text-family",
              "font-style",
              "text-style"
            ],
            "correctAnswer": "font-family",
            "explanation": "The 'font-family' property specifies the font for the text."
          },
          {
            "id": 7,
            "question": "How do you center text in CSS?",
            "options": [
              "text-align: center;",
              "text-align: middle;",
              "font-align: center;",
              "font-align: middle;"
            ],
            "correctAnswer": "text-align: center;",
            "explanation": "The 'text-align' property is used to align the text horizontally in the center of the container."
          },
          {
            "id": 8,
            "question": "What is the correct syntax to select an element with the id 'header'?",
            "options": [
              "#header",
              ".header",
              "header",
              "*header"
            ],
            "correctAnswer": "#header",
            "explanation": "In CSS, the '#' symbol is used to target elements by their ID."
          },
          {
            "id": 9,
            "question": "Which property is used to change the space between letters?",
            "options": [
              "letter-spacing",
              "word-spacing",
              "text-spacing",
              "font-spacing"
            ],
            "correctAnswer": "letter-spacing",
            "explanation": "The 'letter-spacing' property controls the space between characters in a text."
          },
          {
            "id": 10,
            "question": "How do you make each word in a text start with a capital letter?",
            "options": [
              "text-transform: capitalize;",
              "text-transform: uppercase;",
              "text-transform: lowercase;",
              "font-variant: small-caps;"
            ],
            "correctAnswer": "text-transform: capitalize;",
            "explanation": "The 'text-transform: capitalize;' property capitalizes the first letter of each word."
          }
        ],
        "medium": [
          {
            "id": 1,
            "question": "What does 'box-sizing: border-box;' do in CSS?",
            "options": [
              "It includes padding and border in the element's total width and height",
              "It adds borders to the element",
              "It adds extra margin to the element",
              "It excludes padding and border from the total width"
            ],
            "correctAnswer": "It includes padding and border in the element's total width and height",
            "explanation": "With 'box-sizing: border-box;', the padding and border are included in the total width and height of the element."
          },
          {
            "id": 2,
            "question": "What is the default value of the 'position' property in CSS?",
            "options": [
              "static",
              "relative",
              "absolute",
              "fixed"
            ],
            "correctAnswer": "static",
            "explanation": "By default, the 'position' property is set to 'static', which means the element will follow the normal flow of the document."
          },
          {
            "id": 3,
            "question": "Which CSS property controls the order of positioned elements?",
            "options": [
              "z-index",
              "position",
              "order",
              "layer"
            ],
            "correctAnswer": "z-index",
            "explanation": "The 'z-index' property controls the stacking order of positioned elements."
          },
          {
            "id": 4,
            "question": "What does the 'float' property do in CSS?",
            "options": [
              "It moves an element to the left or right of its container",
              "It moves an element to the top of the page",
              "It centers the element",
              "It sets the opacity of the element"
            ],
            "correctAnswer": "It moves an element to the left or right of its container",
            "explanation": "The 'float' property allows an element to float to the left or right of its container."
          },
          {
            "id": 5,
            "question": "What is the difference between 'padding' and 'margin' in CSS?",
            "options": [
              "Padding is the space inside the element's border, while margin is the space outside the border",
              "Padding is the space outside the element, and margin is the space inside",
              "Padding changes the element's background color, while margin does not",
              "Padding defines the element's height, while margin defines its width"
            ],
            "correctAnswer": "Padding is the space inside the element's border, while margin is the space outside the border",
            "explanation": "Padding is the space between the content and the border of an element, while margin is the space outside the border."
          },
          {
            "id": 6,
            "question": "How do you apply styles to a group of elements in CSS?",
            "options": [
              "Separate the selectors with a comma",
              "Separate the selectors with a plus sign",
              "Separate the selectors with a period",
              "Separate the selectors with a dash"
            ],
            "correctAnswer": "Separate the selectors with a comma",
            "explanation": "To apply the same styles to multiple elements, you separate their selectors with a comma."
          },
          {
            "id": 7,
            "question": "Which CSS property can be used to make a font bold?",
            "options": [
              "font-weight",
              "font-style",
              "font-bold",
              "font-thick"
            ],
            "correctAnswer": "font-weight",
            "explanation": "The 'font-weight' property in CSS is used to make text bold."
          },
          {
            "id": 8,
            "question": "How do you change the width of an element's border in CSS?",
            "options": [
              "border-width",
              "border-size",
              "border-height",
              "border-thickness"
            ],
            "correctAnswer": "border-width",
            "explanation": "The 'border-width' property is used to specify the width of an element's border."
          },
          {
            "id": 9,
            "question": "What is the purpose of the 'display' property in CSS?",
            "options": [
              "It controls the layout of an element",
              "It adds a background to an element",
              "It changes the visibility of an element",
              "It changes the font of an element"
            ],
            "correctAnswer": "It controls the layout of an element",
            "explanation": "The 'display' property determines how an element is displayed on the web page, whether it's block, inline, or none."
          },
          {
            "id": 10,
            "question": "What is the difference between 'inline' and 'block' elements in CSS?",
            "options": [
              "Block elements take up the full width available, while inline elements take up only as much width as necessary",
              "Block elements can only be used inside <div> tags, while inline elements can be used anywhere",
              "Block elements can be styled with CSS, while inline elements cannot",
              "Block elements can contain text, while inline elements cannot"
            ],
            "correctAnswer": "Block elements take up the full width available, while inline elements take up only as much width as necessary",
            "explanation": "Block elements (like <div>) take up the full width of their container, while inline elements (like <span>) take up only as much space as needed."
          }
        ],
        "hard": [
          {
            "id": 1,
            "question": "What is the 'flexbox' layout in CSS?",
            "options": [
              "A layout model that provides an easy and clean way to arrange items within a container",
              "A layout that centers elements on a page",
              "A grid-based layout system",
              "A method to create a responsive layout"
            ],
            "correctAnswer": "A layout model that provides an easy and clean way to arrange items within a container",
            "explanation": "The Flexbox layout is a one-dimensional layout model that is used to distribute space between items in a container and align content."
          },
          {
            "id": 2,
            "question": "What does 'grid-template-columns' do in CSS Grid?",
            "options": [
              "Defines the number and width of columns in a grid layout",
              "Defines the height of grid rows",
              "Specifies the background color of grid cells",
              "Specifies the spacing between grid cells"
            ],
            "correctAnswer": "Defines the number and width of columns in a grid layout",
            "explanation": "The 'grid-template-columns' property defines the number of columns and their width in a grid layout."
          },
          {
            "id": 3,
            "question": "What is the 'z-index' property used for in CSS?",
            "options": [
              "To control the vertical stacking order of elements",
              "To create a new stacking context",
              "To adjust the transparency of an element",
              "To set the zoom level of an element"
            ],
            "correctAnswer": "To control the vertical stacking order of elements",
            "explanation": "The 'z-index' property controls the vertical stacking order of elements that overlap each other."
          },
          {
            "id": 4,
            "question": "What is the difference between 'relative' and 'absolute' positioning in CSS?",
            "options": [
              "Relative positioning moves an element relative to its normal position, while absolute positioning moves it relative to its nearest positioned ancestor",
              "Relative positioning moves an element to the top of the page, while absolute positioning moves it to the bottom",
              "Relative positioning keeps the element in the document flow, while absolute positioning removes it",
              "Relative positioning only works with inline elements, while absolute positioning works with block elements"
            ],
            "correctAnswer": "Relative positioning moves an element relative to its normal position, while absolute positioning moves it relative to its nearest positioned ancestor",
            "explanation": "Relative positioning adjusts the element's position relative to its normal flow, while absolute positioning moves it relative to its nearest positioned ancestor."
          },
          {
            "id": 5,
            "question": "What does the 'clip-path' property do in CSS?",
            "options": [
              "Clips an element to a specific shape, such as a circle or polygon",
              "Creates a new stacking context",
              "Adds a background image to an element",
              "Aligns the content of an element"
            ],
            "correctAnswer": "Clips an element to a specific shape, such as a circle or polygon",
            "explanation": "The 'clip-path' property is used to create a clipping region where part of an element is visible, and the rest is hidden."
          },
          {
            "id": 6,
            "question": "How do you make a flex container's children take up equal space in CSS?",
            "options": [
              "Use 'justify-content: space-between;' on the flex container",
              "Set 'flex-grow: 1;' on the children",
              "Use 'flex-direction: row;' on the container",
              "Set 'align-items: center;' on the container"
            ],
            "correctAnswer": "Set 'flex-grow: 1;' on the children",
            "explanation": "By setting 'flex-grow: 1;' on each child, you allow the items to grow and take up equal space in the flex container."
          },
          {
            "id": 7,
            "question": "What is the purpose of the 'keyframes' rule in CSS animations?",
            "options": [
              "It defines the intermediate steps in an animation sequence",
              "It triggers the start of an animation",
              "It specifies the number of times an animation should run",
              "It controls the speed of an animation"
            ],
            "correctAnswer": "It defines the intermediate steps in an animation sequence",
            "explanation": "The '@keyframes' rule defines the intermediate steps in a CSS animation, allowing you to specify how the element's styles change at different stages."
          },
          {
            "id": 8,
            "question": "What is the purpose of the 'transform' property in CSS?",
            "options": [
              "To apply 2D or 3D transformations to an element",
              "To change the background of an element",
              "To resize an element",
              "To change the layout of an element"
            ],
            "correctAnswer": "To apply 2D or 3D transformations to an element",
            "explanation": "The 'transform' property allows you to apply various 2D or 3D transformations, such as rotating, scaling, and translating an element."
          },
          {
            "id": 9,
            "question": "What is the purpose of the 'media queries' in CSS?",
            "options": [
              "To apply different styles for different screen sizes",
              "To preload styles for future use",
              "To center an element on a page",
              "To load external stylesheets"
            ],
            "correctAnswer": "To apply different styles for different screen sizes",
            "explanation": "Media queries allow you to apply different styles based on screen size or device characteristics, making responsive design possible."
          },
          {
            "id": 10,
            "question": "What is the 'object-fit' property used for in CSS?",
            "options": [
              "To specify how an image or video should fit inside a container",
              "To control the aspect ratio of an image",
              "To adjust the size of an object relative to its container",
              "To crop an image"
            ],
            "correctAnswer": "To specify how an image or video should fit inside a container",
            "explanation": "The 'object-fit' property specifies how an image or video should be resized or positioned to fit within its container, while maintaining aspect ratio."
          }
        ]
      }
    },
    {
      "category": "JavaScript",
      "levels": {
        "easy": [
          {
            "id": 1,
            "question": "What is the correct syntax for referring to an external script called 'script.js'?",
            "options": [
              "<script src='script.js'>",
              "<script href='script.js'>",
              "<script ref='script.js'>",
              "<script link='script.js'>"
            ],
            "correctAnswer": "<script src='script.js'>",
            "explanation": "To include an external JavaScript file, the 'src' attribute of the <script> tag should be used."
          },
          {
            "id": 2,
            "question": "How do you write 'Hello World' in an alert box?",
            "options": [
              "alert('Hello World');",
              "msg('Hello World');",
              "alertBox('Hello World');",
              "message('Hello World');"
            ],
            "correctAnswer": "alert('Hello World');",
            "explanation": "The 'alert()' function displays an alert box with the specified message."
          },
          {
            "id": 3,
            "question": "Which operator is used to assign a value to a variable in JavaScript?",
            "options": [
              "=",
              "==",
              "===",
              ":"
            ],
            "correctAnswer": "=",
            "explanation": "The '=' operator assigns a value to a variable."
          },
          {
            "id": 4,
            "question": "How do you create a function in JavaScript?",
            "options": [
              "function myFunction()",
              "create myFunction()",
              "def myFunction()",
              "function: myFunction()"
            ],
            "correctAnswer": "function myFunction()",
            "explanation": "In JavaScript, functions are created with the 'function' keyword followed by the function name and parentheses."
          },
          {
            "id": 5,
            "question": "How can you add a comment in JavaScript?",
            "options": [
              "//This is a comment",
              "<!--This is a comment-->",
              "'This is a comment'",
              "#This is a comment"
            ],
            "correctAnswer": "//This is a comment",
            "explanation": "In JavaScript, single-line comments are started with two forward slashes '//'."
          },
          {
            "id": 6,
            "question": "What is the correct way to check if a variable 'x' is equal to 5?",
            "options": [
              "if (x == 5)",
              "if x = 5",
              "if (x = 5)",
              "if x == 5"
            ],
            "correctAnswer": "if (x == 5)",
            "explanation": "To check if a variable is equal to a value, '==' is used in JavaScript."
          },
          {
            "id": 7,
            "question": "What is the correct syntax for a for loop?",
            "options": [
              "for (i = 0; i < 5; i++)",
              "for (i <= 5; i++)",
              "for (i = 0; i <= 5)",
              "for i = 1 to 5"
            ],
            "correctAnswer": "for (i = 0; i < 5; i++)",
            "explanation": "The correct syntax for a 'for' loop is: 'for (initialization; condition; increment)'."
          },
          {
            "id": 8,
            "question": "How do you round a number to its nearest integer in JavaScript?",
            "options": [
              "Math.round()",
              "round()",
              "Math.ceil()",
              "Math.floor()"
            ],
            "correctAnswer": "Math.round()",
            "explanation": "'Math.round()' is used to round a number to its nearest integer in JavaScript."
          },
          {
            "id": 9,
            "question": "What does the 'typeof' operator do in JavaScript?",
            "options": [
              "Returns the data type of a variable",
              "Returns the value of a variable",
              "Checks if a variable is defined",
              "Checks the length of a variable"
            ],
            "correctAnswer": "Returns the data type of a variable",
            "explanation": "'typeof' is used to find the data type of a variable."
          },
          {
            "id": 10,
            "question": "How do you declare a JavaScript variable?",
            "options": [
              "var x;",
              "variable x;",
              "x = variable;",
              "x = var;"
            ],
            "correctAnswer": "var x;",
            "explanation": "Variables in JavaScript are declared using 'var', 'let', or 'const'."
          }
        ],
        "medium": [
          {
            "id": 1,
            "question": "What will be the output of the following JavaScript code? console.log(2 + '2');",
            "options": [
              "'22'",
              "4",
              "undefined",
              "NaN"
            ],
            "correctAnswer": "'22'",
            "explanation": "JavaScript performs type coercion and concatenates the number 2 with the string '2', resulting in '22'."
          },
          {
            "id": 2,
            "question": "Which of the following is a JavaScript data type?",
            "options": [
              "Number",
              "String",
              "Boolean",
              "All of the above"
            ],
            "correctAnswer": "All of the above",
            "explanation": "JavaScript supports various data types, including Number, String, and Boolean."
          },
          {
            "id": 3,
            "question": "What is 'use strict' in JavaScript?",
            "options": [
              "Enables strict mode, which makes error handling easier",
              "A function that makes the script run faster",
              "Disables the use of variables",
              "A method to run asynchronous code"
            ],
            "correctAnswer": "Enables strict mode, which makes error handling easier",
            "explanation": "'use strict' enforces stricter parsing and error handling in JavaScript."
          },
          {
            "id": 4,
            "question": "How do you declare an array in JavaScript?",
            "options": [
              "var arr = [1, 2, 3];",
              "var arr = {1, 2, 3};",
              "var arr = 1, 2, 3;",
              "var arr = (1, 2, 3);"
            ],
            "correctAnswer": "var arr = [1, 2, 3];",
            "explanation": "In JavaScript, arrays are declared using square brackets []."
          },
          {
            "id": 5,
            "question": "Which function converts JSON to a JavaScript object?",
            "options": [
              "JSON.parse()",
              "JSON.stringify()",
              "JSON.convert()",
              "JSON.objectify()"
            ],
            "correctAnswer": "JSON.parse()",
            "explanation": "'JSON.parse()' is used to convert a JSON string into a JavaScript object."
          },
          {
            "id": 6,
            "question": "How can you check if a variable 'x' is an array in JavaScript?",
            "options": [
              "Array.isArray(x)",
              "typeof x === 'array'",
              "x instanceof Array",
              "Both A and C"
            ],
            "correctAnswer": "Both A and C",
            "explanation": "'Array.isArray()' and 'x instanceof Array' are both valid methods to check if 'x' is an array."
          },
          {
            "id": 7,
            "question": "Which of the following methods removes the last element from an array in JavaScript?",
            "options": [
              "pop()",
              "shift()",
              "slice()",
              "delete()"
            ],
            "correctAnswer": "pop()",
            "explanation": "'pop()' removes the last element from an array and returns that element."
          },
          {
            "id": 8,
            "question": "What is a closure in JavaScript?",
            "options": [
              "A function that has access to its own scope, the scope of its outer function, and the global scope",
              "A function that only has access to the global scope",
              "A variable that is only available within a function",
              "A loop that runs indefinitely"
            ],
            "correctAnswer": "A function that has access to its own scope, the scope of its outer function, and the global scope",
            "explanation": "Closures in JavaScript allow functions to remember their lexical environment."
          },
          {
            "id": 9,
            "question": "Which of the following is used to iterate over an array in JavaScript?",
            "options": [
              "forEach()",
              "map()",
              "filter()",
              "All of the above"
            ],
            "correctAnswer": "All of the above",
            "explanation": "'forEach()', 'map()', and 'filter()' are all used to iterate over arrays in JavaScript."
          },
          {
            "id": 10,
            "question": "What is the output of the following code? console.log(typeof null);",
            "options": [
              "'object'",
              "'null'",
              "'undefined'",
              "'string'"
            ],
            "correctAnswer": "'object'",
            "explanation": "In JavaScript, 'null' is considered a falsy value and its type is 'object', which is a known quirk."
          }
        ],
        "hard": [
          {
            "id": 1,
            "question": "What will the following code output? console.log(0.1 + 0.2 === 0.3);",
            "options": [
              "false",
              "true",
              "NaN",
              "undefined"
            ],
            "correctAnswer": "false",
            "explanation": "Due to floating-point precision errors, the result of 0.1 + 0.2 is not exactly equal to 0.3."
          },
          {
            "id": 2,
            "question": "What is event delegation in JavaScript?",
            "options": [
              "A technique to handle events at a higher level in the DOM",
              "A method to optimize event handling for multiple elements",
              "Both A and B",
              "None of the above"
            ],
            "correctAnswer": "Both A and B",
            "explanation": "Event delegation involves handling events at a higher DOM level, often used to optimize event handling for multiple child elements."
          },
          {
            "id": 3,
            "question": "What is the 'bind()' method used for in JavaScript?",
            "options": [
              "To create a new function with a specified 'this' value",
              "To bind two variables together",
              "To close a function",
              "To attach an event listener"
            ],
            "correctAnswer": "To create a new function with a specified 'this' value",
            "explanation": "'bind()' creates a new function where the 'this' value is permanently set to a specified object."
          },
          {
            "id": 4,
            "question": "What is the difference between 'call()' and 'apply()' methods in JavaScript?",
            "options": [
              "'call()' passes arguments individually, while 'apply()' passes arguments as an array",
              "'apply()' passes arguments individually, while 'call()' passes arguments as an array",
              "Both are the same and can be used interchangeably",
              "'call()' is used for synchronous functions, while 'apply()' is for asynchronous"
            ],
            "correctAnswer": "'call()' passes arguments individually, while 'apply()' passes arguments as an array",
            "explanation": "Both 'call()' and 'apply()' invoke functions, but 'call()' takes arguments separately, while 'apply()' takes them as an array."
          },
          {
            "id": 5,
            "question": "What does the 'new' keyword do in JavaScript?",
            "options": [
              "Creates a new object",
              "Assigns a new value to a variable",
              "Declares a new variable",
              "Deletes an object"
            ],
            "correctAnswer": "Creates a new object",
            "explanation": "The 'new' keyword in JavaScript is used to create a new object from a constructor function."
          },
          {
            "id": 6,
            "question": "What is the purpose of 'Promises' in JavaScript?",
            "options": [
              "To handle asynchronous operations",
              "To create a new variable",
              "To declare a function",
              "To return a value from a function"
            ],
            "correctAnswer": "To handle asynchronous operations",
            "explanation": "Promises in JavaScript are used to handle asynchronous operations by representing a value that may be available in the future."
          },
          {
            "id": 7,
            "question": "How can you deep clone an object in JavaScript?",
            "options": [
              "JSON.parse(JSON.stringify(object))",
              "object.assign({}, object)",
              "object.clone()",
              "object.deepCopy()"
            ],
            "correctAnswer": "JSON.parse(JSON.stringify(object))",
            "explanation": "A common method to deep clone an object in JavaScript is to use 'JSON.parse(JSON.stringify(object))', though it has limitations."
          },
          {
            "id": 8,
            "question": "What is the output of the following code? console.log([1, 2, 3] + [4, 5, 6]);",
            "options": [
              "'1,2,34,5,6'",
              "'123456'",
              "'[1, 2, 3, 4, 5, 6]'",
              "undefined"
            ],
            "correctAnswer": "'1,2,34,5,6'",
            "explanation": "When arrays are concatenated with the '+' operator in JavaScript, they are first converted to strings and then concatenated."
          },
          {
            "id": 9,
            "question": "What does 'this' refer to in JavaScript?",
            "options": [
              "The object from which the function was called",
              "The function in which 'this' is used",
              "The parent object",
              "The global object"
            ],
            "correctAnswer": "The object from which the function was called",
            "explanation": "'this' refers to the object that invoked the function in which 'this' is used."
          },
          {
            "id": 10,
            "question": "What is the 'IIFE' in JavaScript?",
            "options": [
              "An Immediately Invoked Function Expression",
              "An Iteratively Invoked Function Event",
              "An Internally Invoked Function Expression",
              "None of the above"
            ],
            "correctAnswer": "An Immediately Invoked Function Expression",
            "explanation": "An IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined."
          }
        ]
      }
    },
    {
      "category": "React",
      "levels": {
        "easy": [
          {
            "id": 1,
            "question": "What is React?",
            "options": [
              "A JavaScript library for building user interfaces",
              "A framework for writing server-side applications",
              "A database management tool",
              "A CSS framework"
            ],
            "correctAnswer": "A JavaScript library for building user interfaces",
            "explanation": "React is a JavaScript library developed by Facebook for building fast and interactive user interfaces."
          },
          {
            "id": 2,
            "question": "What is a React component?",
            "options": [
              "A reusable piece of the user interface",
              "A function that adds styles to the app",
              "A method to connect to APIs",
              "A tool to debug React applications"
            ],
            "correctAnswer": "A reusable piece of the user interface",
            "explanation": "React components are building blocks of the UI that are reusable throughout the app."
          },
          {
            "id": 3,
            "question": "How do you create a functional component in React?",
            "options": [
              "function MyComponent() {}",
              "var MyComponent = new React.Component()",
              "class MyComponent extends Component {}",
              "function MyComponent = new React()"
            ],
            "correctAnswer": "function MyComponent() {}",
            "explanation": "A functional component in React is created as a JavaScript function that returns JSX."
          },
          {
            "id": 4,
            "question": "What does JSX stand for?",
            "options": [
              "JavaScript XML",
              "JavaScript Extension",
              "Java Source XML",
              "Java Syntax Expression"
            ],
            "correctAnswer": "JavaScript XML",
            "explanation": "JSX is a syntax extension for JavaScript that looks similar to XML and is used to describe the UI in React."
          },
          {
            "id": 5,
            "question": "How can you pass data to a child component in React?",
            "options": [
              "Using props",
              "Using state",
              "Using functions",
              "Using variables"
            ],
            "correctAnswer": "Using props",
            "explanation": "Props (short for properties) are used to pass data from parent to child components in React."
          },
          {
            "id": 6,
            "question": "What hook would you use to handle side effects in React?",
            "options": [
              "useEffect",
              "useState",
              "useContext",
              "useRef"
            ],
            "correctAnswer": "useEffect",
            "explanation": "The useEffect hook is used to handle side effects in React, such as fetching data or setting up subscriptions."
          },
          {
            "id": 7,
            "question": "Which keyword is used to create a class component in React?",
            "options": [
              "class",
              "function",
              "extends",
              "component"
            ],
            "correctAnswer": "class",
            "explanation": "Class components in React are created using the 'class' keyword, followed by extending the 'React.Component' base class."
          },
          {
            "id": 8,
            "question": "How do you update state in a functional component?",
            "options": [
              "By using the useState hook",
              "By using the setState method",
              "By directly modifying the state",
              "By calling this.state"
            ],
            "correctAnswer": "By using the useState hook",
            "explanation": "In functional components, the useState hook is used to define and update state variables."
          },
          {
            "id": 9,
            "question": "What is the purpose of keys in React?",
            "options": [
              "To help React identify which items have changed in lists",
              "To store state in components",
              "To handle side effects",
              "To optimize performance of class components"
            ],
            "correctAnswer": "To help React identify which items have changed in lists",
            "explanation": "Keys help React efficiently update and re-render lists by identifying which items have changed, added, or removed."
          },
          {
            "id": 10,
            "question": "What does 'lifting state up' refer to in React?",
            "options": [
              "Moving state to a common ancestor component",
              "Passing props from child to parent",
              "Using state in functional components",
              "Converting a functional component into a class component"
            ],
            "correctAnswer": "Moving state to a common ancestor component",
            "explanation": "Lifting state up refers to moving state to the closest common ancestor component to share it among multiple child components."
          }
        ],
        "medium": [
          {
            "id": 1,
            "question": "What is the virtual DOM in React?",
            "options": [
              "A lightweight copy of the real DOM used for faster updates",
              "A debugging tool for React components",
              "A JavaScript library used alongside React",
              "A way to interact with the database in React"
            ],
            "correctAnswer": "A lightweight copy of the real DOM used for faster updates",
            "explanation": "The virtual DOM is a representation of the real DOM that React uses to optimize updates and rendering."
          },
          {
            "id": 2,
            "question": "What is the difference between props and state in React?",
            "options": [
              "Props are read-only, while state can change",
              "State is read-only, while props can change",
              "Both are mutable",
              "Both are used for rendering data"
            ],
            "correctAnswer": "Props are read-only, while state can change",
            "explanation": "Props are immutable and passed down from parent to child components, while state is local and can be updated within a component."
          },
          {
            "id": 3,
            "question": "What does the useContext hook do in React?",
            "options": [
              "Allows you to consume context values",
              "Creates a context object",
              "Updates the state in a parent component",
              "Renders a list of child components"
            ],
            "correctAnswer": "Allows you to consume context values",
            "explanation": "The useContext hook allows functional components to access context values directly without using a Consumer component."
          },
          {
            "id": 4,
            "question": "Which of the following is NOT a React lifecycle method?",
            "options": [
              "componentDidMount",
              "componentWillRender",
              "componentDidUpdate",
              "componentWillUnmount"
            ],
            "correctAnswer": "componentWillRender",
            "explanation": "There is no lifecycle method called componentWillRender in React; it is not part of the lifecycle."
          },
          {
            "id": 5,
            "question": "What is React.Fragment used for?",
            "options": [
              "To group multiple elements without adding extra nodes to the DOM",
              "To create inline styles",
              "To store global state",
              "To optimize component performance"
            ],
            "correctAnswer": "To group multiple elements without adding extra nodes to the DOM",
            "explanation": "React.Fragment is used to group a list of children without adding extra nodes to the DOM."
          },
          {
            "id": 6,
            "question": "Which hook would you use to memoize a value in React?",
            "options": [
              "useMemo",
              "useEffect",
              "useState",
              "useRef"
            ],
            "correctAnswer": "useMemo",
            "explanation": "useMemo is used to memoize expensive calculations so that they are only recomputed when their dependencies change."
          },
          {
            "id": 7,
            "question": "What is reconciliation in React?",
            "options": [
              "The process of updating the virtual DOM when props or state change",
              "A method of handling errors in React",
              "The process of resolving conflicts between components",
              "A way of optimizing rendering performance"
            ],
            "correctAnswer": "The process of updating the virtual DOM when props or state change",
            "explanation": "Reconciliation is the process React uses to determine the minimal number of changes needed to update the real DOM when the state or props change."
          },
          {
            "id": 8,
            "question": "How do you optimize performance in a React app?",
            "options": [
              "Using React.memo and useCallback",
              "Using componentWillMount to load data",
              "Using inline styles for all components",
              "Avoiding the use of keys in lists"
            ],
            "correctAnswer": "Using React.memo and useCallback",
            "explanation": "React.memo and useCallback are used to memoize components and functions, preventing unnecessary re-renders."
          },
          {
            "id": 9,
            "question": "How does React handle form submission?",
            "options": [
              "By using onSubmit event handlers",
              "By using native HTML form handlers",
              "By using context",
              "By automatically managing form state"
            ],
            "correctAnswer": "By using onSubmit event handlers",
            "explanation": "React uses onSubmit event handlers to handle form submission in controlled and uncontrolled forms."
          },
          {
            "id": 10,
            "question": "What is the purpose of the useReducer hook in React?",
            "options": [
              "To manage more complex state logic than useState",
              "To replace Redux in small applications",
              "To add new elements to the DOM",
              "To memoize expensive computations"
            ],
            "correctAnswer": "To manage more complex state logic than useState",
            "explanation": "The useReducer hook is used for managing more complex state transitions, offering an alternative to useState."
          }
        ],
        "hard": [
          {
            "id": 1,
            "question": "What is the difference between controlled and uncontrolled components in React?",
            "options": [
              "Controlled components have their value managed by state, while uncontrolled components access data from the DOM",
              "Controlled components access data directly from the DOM, while uncontrolled components are controlled by React state",
              "Both are managed by the component's state",
              "Both refer to global state management"
            ],
            "correctAnswer": "Controlled components have their value managed by state, while uncontrolled components access data from the DOM",
            "explanation": "In controlled components, the form data is managed by the state, while in uncontrolled components, the data is accessed directly from the DOM."
          },
          {
            "id": 2,
            "question": "What is code-splitting in React?",
            "options": [
              "A technique to load code in chunks to improve performance",
              "A method to split code between functional and class components",
              "A way to debug code in the React app",
              "A React lifecycle method"
            ],
            "correctAnswer": "A technique to load code in chunks to improve performance",
            "explanation": "Code-splitting in React allows you to split your code into smaller bundles that can be loaded on demand, improving performance."
          },
          {
            "id": 3,
            "question": "How can you handle error boundaries in React?",
            "options": [
              "By using a class component with componentDidCatch",
              "By using the useEffect hook",
              "By using the try-catch block",
              "By using React.memo"
            ],
            "correctAnswer": "By using a class component with componentDidCatch",
            "explanation": "Error boundaries are implemented in React using class components that define componentDidCatch to handle errors in the component tree."
          },
          {
            "id": 4,
            "question": "What is the purpose of React.lazy?",
            "options": [
              "To lazily load components on demand",
              "To defer execution of event handlers",
              "To create global state",
              "To import CSS files"
            ],
            "correctAnswer": "To lazily load components on demand",
            "explanation": "React.lazy is used to dynamically import and load components only when they are needed, improving the initial load time of the app."
          },
          {
            "id": 5,
            "question": "How can you avoid prop drilling in a React app?",
            "options": [
              "By using the Context API",
              "By using higher-order components",
              "By using refs",
              "By creating multiple components"
            ],
            "correctAnswer": "By using the Context API",
            "explanation": "Prop drilling can be avoided by using the Context API, which allows components to consume state without passing props down multiple levels."
          },
          {
            "id": 6,
            "question": "What is the difference between React.memo and React.PureComponent?",
            "options": [
              "React.memo is used for functional components, while React.PureComponent is used for class components",
              "React.memo is used for class components, while React.PureComponent is used for functional components",
              "Both are used to handle lifecycle methods",
              "Both refer to state management techniques"
            ],
            "correctAnswer": "React.memo is used for functional components, while React.PureComponent is used for class components",
            "explanation": "React.memo is a higher-order component that memoizes functional components, while React.PureComponent is used for class components to prevent unnecessary re-renders."
          },
          {
            "id": 7,
            "question": "How can you handle asynchronous operations in React using hooks?",
            "options": [
              "By using useEffect with async/await",
              "By using useMemo",
              "By using setState with async",
              "By using componentDidUpdate"
            ],
            "correctAnswer": "By using useEffect with async/await",
            "explanation": "To handle asynchronous operations, you can use the useEffect hook combined with async/await inside the function."
          },
          {
            "id": 8,
            "question": "What is the purpose of React.Portal?",
            "options": [
              "To render components outside of their parent DOM hierarchy",
              "To create modals and popups",
              "To manage component state globally",
              "To optimize React rendering"
            ],
            "correctAnswer": "To render components outside of their parent DOM hierarchy",
            "explanation": "React.Portal is used to render components into a DOM node that exists outside the parent component's DOM hierarchy, useful for modals and tooltips."
          },
          {
            "id": 9,
            "question": "What is the purpose of the useCallback hook?",
            "options": [
              "To memoize functions to avoid unnecessary re-creations",
              "To memoize values",
              "To handle side effects",
              "To manage global state"
            ],
            "correctAnswer": "To memoize functions to avoid unnecessary re-creations",
            "explanation": "useCallback is used to memoize functions so they don't get re-created on every render unless their dependencies change."
          },
          {
            "id": 10,
            "question": "How do you implement server-side rendering in a React app?",
            "options": [
              "By using frameworks like Next.js",
              "By using Redux",
              "By using useContext",
              "By using create-react-app"
            ],
            "correctAnswer": "By using frameworks like Next.js",
            "explanation": "Server-side rendering (SSR) in React can be implemented using frameworks like Next.js, which pre-renders pages on the server."
          }
        ]
      }
    }
  ]
}